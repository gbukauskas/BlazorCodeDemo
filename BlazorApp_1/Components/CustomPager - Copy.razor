@namespace BlazorApp_1
@rendermode InteractiveServer
@inject NavigationManager NavManager

@using BlazorApp_1.DataContext.Models
@using System.Text

<div class="pager">
    @foreach (var link in PrintableButtons)
    {
        <a class="custom-link @GetClassName(link)" href="@GenerateURL(link)" title="@GetTitle(link)" disabled=@link.IsDisabled>
            @GenerateLabel(link)
        </a>
    }
    <span class="set-info">@TotalRecords rec. in @PageCount pages.</span>
    <form class="form-inline" method="post" @onsubmit="Submit" @formname="Starship1">
        <AntiforgeryToken />
        <span>Go to page</span>
        <InputText @bind-Value="Model!.Id" style="width: 6em;"/>

        <input type="hidden" name="MaxButtons" value="@Model!.MaxButtons" />
        <input type="hidden" name="PageCount" value="@Model!.PageCount" />
        <input type="hidden" name="PageNumber" value="@Model!.PageNumber" />
        <input type="hidden" name="PageSize" value="@Model!.PageSize" />
        <input type="hidden" name="BaseUrl" value="@Model!.BaseUrl" />

        <button type="submit" class="btn btn-primary btn-sm">Submit</button>
        @if (!String.IsNullOrEmpty(ErrorMessage))
        {
            <span class="text-danger">@DecodeMsg(ErrorMessage)</span>
        }
    </form>
</div>

@code {
    // https://havit.blazor.eu/components/HxPager
    // https://github.com/radzenhq/radzen-blazor/blob/master/Radzen.Blazor/RadzenPager.razor.cs

    [SupplyParameterFromForm]
    public PagerPostData? Model { get; set; }

    /// <summary>
    /// Number of pages. Default value is 1.
    /// </summary>
    [Parameter]
    public int MaxButtons { get; set; } = 10;

    /// <summary>
    /// Number of pages. Default value is 1.
    /// </summary>
    [Parameter]
    public int PageCount { get; set; } = 1;

    /// <summary>
    /// Current page. Default value is 1
    /// </summary>
    [Parameter]
    public int PageNumber { get; set; } = 1;

    /// <summary>
    /// Number of rows in the page. Default value is 15
    /// </summary>
    [Parameter]
    public int PageSize { get; set; } = 15;

    /// <summary>
    /// Base address. Mandatory parameter. Leading and trailng slashes are optional.
    /// <code>showcustomers</code>, <code>/showcustomers</code>, <code>showcustomers/</code>, <code>/showcustomers/</code> are identical addresses
    /// </summary>
    [Parameter]
    public string BaseUrl { get; set; } = "";

    /// <summary>
    /// URL encoded error message
    /// </summary>
    [Parameter]
    public string ErrorMessage { get; set; } = "";

    /// <summary>
    /// Total numer of records
    /// </summary>
    [Parameter]
    public string TotalRecords { get; set; } = "";

    private List<PagerData> PrintableButtons = new List<PagerData>();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (String.IsNullOrEmpty(BaseUrl))
        {
            throw new ArgumentException("Base URL is empty");
        }

        Model ??= new();
        Model.Id = PageNumber.ToString();
        Model.MaxButtons = this.MaxButtons;
        Model.PageCount = this.PageCount;
        Model.PageNumber = this.PageNumber;
        Model.PageSize = this.PageSize;
        Model.BaseUrl = this.BaseUrl;

        PrepareButtonList();
        InsertPrevButtons();
        AppendTrailButtons();
    }

    /// <summary>
    /// The function collects <code>PagerData</code> structures in the <code>PrintableButtons</code> list.
    /// The collection must be no longer than the value stated in the parameter <code>MaxButtons</code>.
    /// The function shifts to left <code>PrintableButtons</code> if current page (item with <code>PageNumber</code>) is not visible.
    /// </summary>
    private void PrepareButtonList()
    {
        bool currentPageIsVisible = false;
        for (int i = 1; i <= PageCount; i++)
        {
            if (PrintableButtons.Count >= MaxButtons)
            {
                if (currentPageIsVisible)
                {
                    break;
                }
                PrintableButtons = PrintableButtons.Skip(1).Take(PrintableButtons.Count - 1).ToList();
            }

            var item = new PagerData(i, i == PageNumber, i == PageNumber);
            if (item.IsSelected)
            {
                currentPageIsVisible = true;
            }
            PrintableButtons.Add(item);

        }
    }

    /// <summary>
    /// The function inserts 2 buttons: "Go to previous page" and "Go to first".
    /// </summary>
    private void InsertPrevButtons()
    {
        var item = new PagerData(PageNumber - 1, false, PageNumber < 2);
        item.PageIndex = "l";
        PrintableButtons.Insert(0, item);
        item = new PagerData(1, false, PageNumber < 2);
        item.PageIndex = "L";
        PrintableButtons.Insert(0, item);
    }

    /// <summary>
    /// The function appends 2 buttons: "Go to next" and "Go to last"
    /// </summary>
    private void AppendTrailButtons()
    {
        var item = new PagerData(PageNumber + 1, false, PageNumber >= PageCount);
        item.PageIndex = "r";
        PrintableButtons.Add(item);
        item = new PagerData(PageCount, false, PageNumber >= PageCount);
        item.PageIndex = "R";
        PrintableButtons.Add(item);
    }

    /// <summary>
    /// The function generates href parameter for the <code>NavLink</code> component
    /// </summary>
    /// <param name="page">Data for the current page.</param>
    /// <returns>URL</returns>
    private string GenerateURL(PagerData page)
    {
        int pgIndex;
        switch (page.PageIndex)
        {
            case "L":
                pgIndex = 1;
                break;
            case "l":
                pgIndex = Math.Max(PageNumber - 1, 1);
                break;
            case "r":
                pgIndex = Math.Min(PageNumber + 1, PageCount);
                break;
            case "R":
                pgIndex = PageCount;
                break;
            default:
                pgIndex = page.Id;
                break;
        }
        var rzlt = new StringBuilder($"/{BaseUrl}/{pgIndex}/{PageSize}");
        return rzlt.ToString();
    }

    /// <summary>
    /// The returns label string.
    /// </summary>
    /// <param name="page">Current page</param>
    /// <returns>The label</returns>
    private string GenerateLabel(PagerData page)
    {
        string rzlt;
        switch (page.PageIndex)
        {
            case "L":
                rzlt = "\u2BEC";    // Go to first
                break;
            case "l":
                rzlt = "\u2B9C";    // Go to previous
                break;
            case "r":
                rzlt = "\u2B9E";    // Go to next
                break;
            case "R":
                rzlt = "\u2BEE";    // Go to last
                break;
            default:
                rzlt = page.PageIndex;  // Go to the page, page.PageIndex is index of the page
                break;
        }
        return rzlt;
    }

    private string GetTitle(PagerData page)
    {
        string rzlt;
        switch (page.PageIndex)
        {
            case "L":
                rzlt = "Go back to first page";    // Go to first
                break;
            case "l":
                rzlt = "Go back one page";      // Go to previous
                break;
            case "r":
                rzlt = "Go to the next page";    // Go to next
                break;
            case "R":
                rzlt = "Go to the last page";    // Go to last
                break;
            default:
                rzlt = $"Go to page # {page.PageIndex}";  // Go to the page, page.PageIndex is index of the page
                break;
        }
        return rzlt;
    }

    private string GetClassName(PagerData page)
    {
        if (page.IsSelected)
        {
            return "selected-label";
        }
        else
        {
            return "common-label";
        }
    }

    private void Submit()
    {
        try
        {
            if (String.IsNullOrEmpty(Model?.Id))
            {
                throw new Exception("Invalid POST request");
            }
            var i = Int32.Parse(Model.Id);
            if (i < 1 || i > Model.PageCount)
            {
                throw new Exception("Invalid page number");
            }
            RepaintPage(i, String.Empty);
        }
        catch (Exception ex)
        {

            RepaintPage(Model!.PageNumber, System.Net.WebUtility.UrlEncode(ex.Message));
        }
    }

    private void RepaintPage(int pgNumber, string errorMessage)
    {
        string URL;

        if (String.IsNullOrEmpty(errorMessage))
        {
            URL = $"/{Model!.BaseUrl}/{pgNumber}/{Model!.PageSize}";
        } 
        else
        {
            URL = $"/{Model!.BaseUrl}/{pgNumber}/{Model!.PageSize}/{errorMessage}";
        }
        NavManager.NavigateTo(URL);
    }

    private string DecodeMsg(string message)
    {
        return String.IsNullOrEmpty(message) ? "" : System.Net.WebUtility.UrlDecode(message);
    }

    public class PagerPostData
    {
        public string? Id { get; set; }
        public int MaxButtons { get; set; }
        public int PageCount { get; set; }
        public int PageNumber { get; set; }
        public int PageSize { get; set; }
        public string? BaseUrl { get; set; }
    }
}
